name: Windows x64 Build

on:
  push:
    tags:
      - '[1-9].[0-9]+'
      - '[1-9].[0-9]+.[0-9]+'
  workflow_dispatch:
    inputs:
      msystem:
        description: 'MSYS2 environment'
        options:
          - MINGW64
          - CLANG64
jobs:
  build:
    runs-on: windows-latest

    permissions:
      contents: write
    
    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: Get version
        uses: actions/checkout@v4
        with:
          path: repo
        
      - name: Install msys2
        uses: msys2/setup-msys2@v2
        with:
          location: C:\msys2
          update: true
          msystem: ${{ inputs.msystem }}
          install: |
            git
            wget
            xz
          pacboy: |
            gcc:p
            cmake:p
            autotools:p
            ninja:p
            gtkmm3:p
            lcms2:p
            fftw:p
            lensfun:p
            mimalloc:p
            opencolorio:p

      - name: Get version
        run: |
          cd repo
          if [ "$GITHUB_REF_TYPE" = "tag" ]; then
              echo "ART_VERSION=$GITHUB_REF_NAME" >> "$(cygpath -u $GITHUB_ENV)"
          else
              echo "ART_VERSION=$(git rev-parse --short HEAD)" >> "$(cygpath -u $GITHUB_ENV)"
          fi
        
      - name: Install exiv2
        run: |
          wget https://github.com/Exiv2/exiv2/releases/download/v0.27.7/exiv2-0.27.7-Source.tar.gz
          tar xzf exiv2-0.27.7-Source.tar.gz
          mkdir build-exiv2
          cd build-exiv2
          cmake \
            -GNinja \
            -DCMAKE_BUILD_TYPE=Release  \
            -DCMAKE_INSTALL_PREFIX=c:/msys2/msys64/usr/local \
            -DEXIV2_ENABLE_WIN_UNICODE=1 \
            -DEXIV2_ENABLE_BMFF=1 \
            ../exiv2-0.27.7-Source
          ninja install
          cd ..

      - name: Install LibRaw
        run: |
          git clone --depth 1 https://github.com/LibRaw/LibRaw.git
          cd LibRaw
          autoreconf -i
          CPPFLAGS=-DUSE_X3FTOOLS ./configure --prefix=c:/msys2/msys64/usr/local
          make -j
          make install
          cd ..

      - name: Install CTL
        run: |
          git clone --depth 1 https://github.com/ampas/CTL.git
          mkdir build-CTL
          cd build-CTL
          cmake \
            -GNinja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=c:/msys2/msys64/usr/local \
            -DCMAKE_CXX_FLAGS=-fpermissive \
            ../CTL
          ninja install
          cd ..

      - name: Configure build
        run: |
          mkdir build
          cd build
          export PKG_CONFIG_PATH=c:/msys2/msys64/usr/local/lib/pkgconfig
          cmake \
            -GNinja \
            -DCMAKE_BUILD_TYPE=Release \
            -DENABLE_LIBRAW=1 \
            -DENABLE_OCIO=1 \
            -DENABLE_CTL=1 \
            -DCTL_INCLUDE_DIR=/usr/local/include/CTL \
            -DCMAKE_LIBRARY_PATH=/usr/local/lib \
            -DBUILD_BUNDLE=1 \
            ../repo
          cd ..

      - name: Build
        run: |
          cd build
          ninja install

      - name: Include Lensfun
        run: |
          lensfun-update-data

      - name: Create bundle
        env:
          GITHUB_AUTH: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd build/Release
          python ../../repo/tools/win/bundle_ART.py \
            -o ../../bundle -v -E -I -m c:/msys2/msys64 \
            --exiftool-version 13.00

      - name: Create installer
        working-directory: bundle
        shell: pwsh
        run: |
          choco install innosetup
          iscc /F"installer" "WindowsInnoSetup.iss"

      - name: Prepare artifact name
        run: |
          ARTIFACT_NAME="ART_${ART_VERSION}_Win64.exe"
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> "$(cygpath -u $GITHUB_ENV)"
          mv installer.exe ${ARTIFACT_NAME} 
          if [ "$GITHUB_REF_TYPE" = "tag" ]; then
              echo "RELEASE_TAG=${ART_VERSION}" >> "$(cygpath -u $GITHUB_ENV)"
              echo "RELEASE_MAKE_LATEST=true" >> "$(cygpath -u $GITHUB_ENV)"
          else
              echo "RELEASE_TAG=nightly" >> "$(cygpath -u $GITHUB_ENV)"
              echo "RELEASE_MAKE_LATEST=false" >> "$(cygpath -u $GITHUB_ENV)"
          fi

      - name: Publish release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.RELEASE_TAG }}
          body: ${{ env.RELEASE_TAG }}
          allowUpdates: true
          makeLatest: ${{ env.RELEASE_MAKE_LATEST }}
          artifacts: ${{ env.ARTIFACT_NAME }}
