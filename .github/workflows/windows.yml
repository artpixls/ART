name: Windows Builds

on:
  push:
    tags:
      - '[1-9].[0-9]+'
      - '[1-9].[0-9]+.[0-9]+'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, windows-11-arm]
        include:
          - os: windows-latest
            arch: x64
            msystem: MINGW64
          - os: windows-11-arm
            arch: arm64
            msystem: CLANGARM64
      fail-fast: false
    
    runs-on: ${{ matrix.os }}

    permissions:
      contents: write
    
    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: Get version
        uses: actions/checkout@v4
        with:
          path: repo
        
      - name: Cache msys2 install
        id: cache-msys2-install
        uses: actions/cache@v4
        with:
          path: C:\msys2
          key: msys2-install-${{ matrix.os }}-${{ matrix.arch }}

      - name: Install msys2
        if: steps.cache-msys2-install.outputs.cache-hit != 'true'
        uses: msys2/setup-msys2@v2
        with:
          location: C:\msys2
          update: true
          msystem: ${{ matrix.msystem }}
          install: |
            git
            wget
            xz
            p7zip
          pacboy: |
            gcc:p
            cmake:p
            autotools:p
            ninja:p
            gtkmm3:p
            lcms2:p
            fftw:p
            lensfun:p
            mimalloc:p
            opencolorio:p

      - name: Cache downgrade-packages-x64
        if: ${{ matrix.arch == 'x64' }}
        id: cache-downgrade-x64
        uses: actions/cache@v4
        with:
          path: C:\msys2\msys64\var\cache\pacman\pkg
          key: downgrade-x64-${{ matrix.os }}-${{ matrix.arch }}

      - if: ${{ matrix.arch == 'x64' && steps.cache-downgrade-x64.outputs.cache-hit != 'true' }}
        name: Downgrade MSYS2 packages
        run: |
          pacman --noconfirm -U https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-pango-1.56.3-2-any.pkg.tar.zst
          pacman --noconfirm -U https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-glib2-2.84.3-2-any.pkg.tar.zst

      - name: Cache downgrade-packages-arm64
        if: ${{ matrix.arch == 'arm64' }}
        id: cache-downgrade-arm64
        uses: actions/cache@v4
        with:
          path: C:\msys2\msys64\var\cache\pacman\pkg
          key: downgrade-arm64-${{ matrix.os }}-${{ matrix.arch }}

      - if: ${{ matrix.arch == 'arm64' && steps.cache-downgrade-arm64.outputs.cache-hit != 'true' }}
        name: Downgrade MSYS2 packages
        run: |
          pacman --noconfirm -U https://repo.msys2.org/mingw/clangarm64/mingw-w64-clang-aarch64-pango-1.56.3-2-any.pkg.tar.zst
          pacman --noconfirm -U https://repo.msys2.org/mingw/clangarm64/mingw-w64-clang-aarch64-glib2-2.84.2-1-any.pkg.tar.zst
          
      - name: Get version
        run: |
          cd repo
          if [ "$GITHUB_REF_TYPE" = "tag" ]; then
              echo "ART_VERSION=$GITHUB_REF_NAME" >> "$(cygpath -u $GITHUB_ENV)"
          else
              echo "ART_VERSION=$(git rev-parse --short HEAD)" >> "$(cygpath -u $GITHUB_ENV)"
          fi
        
      - name: Cache exiv2
        id: cache-exiv2
        uses: actions/cache@v4
        with:
          path: C:\msys2\msys64\usr\local\bin\exiv2.exe
          key: exiv2-${{ matrix.os }}-${{ matrix.arch }}

      - name: Install exiv2
        if: steps.cache-exiv2.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/Exiv2/exiv2/releases/download/v0.27.7/exiv2-0.27.7-Source.tar.gz
          tar xzf exiv2-0.27.7-Source.tar.gz
          mkdir build-exiv2
          cd build-exiv2
          cmake \
            -GNinja \
            -DCMAKE_BUILD_TYPE=Release  \
            -DCMAKE_INSTALL_PREFIX=c:/msys2/msys64/usr/local \
            -DEXIV2_ENABLE_WIN_UNICODE=1 \
            -DEXIV2_ENABLE_BMFF=1 \
            ../exiv2-0.27.7-Source
          ninja install
          cd ..

      - name: Cache CTL
        id: cache-ctl
        uses: actions/cache@v4
        with:
          path: C:\msys2\msys64\usr\local\bin\IlmCtlMath.dll
          key: ctl-${{ matrix.os }}-${{ matrix.arch }}

      - name: Install CTL
        if: steps.cache-ctl.outputs.cache-hit != 'true'
        run: |
          git clone --depth 1 https://github.com/ampas/CTL.git
          mkdir build-CTL
          cd build-CTL
          cmake \
            -GNinja \
            -GNinja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=c:/msys2/msys64/usr/local \
            -DCMAKE_CXX_FLAGS="-fpermissive -fms-extensions" \
            -DCTL_BUILD_TESTS=0 -DCTL_BUILD_TOOLS=0 \
            ../CTL
          ninja install
          cd ..

      - name: Install LibRaw
        run: |
          git clone --depth 1 https://github.com/LibRaw/LibRaw.git
          cd LibRaw
          autoreconf -i
          if [ "${{ matrix.msystem }}" = "MINGW64" ]; then
             export CC=gcc
             export CXX=g++
          else
             export CC=clang
             export CXX=clang++
          fi
          CPPFLAGS=-DUSE_X3FTOOLS ./configure --prefix=c:/msys2/msys64/usr/local
          make -j
          make install
          cd ..

      - name: Configure build
        run: |
          mkdir build
          cd build
          export PKG_CONFIG_PATH=c:/msys2/msys64/usr/local/lib/pkgconfig
          if [ "${{ matrix.msystem }}" = "MINGW64" ]; then
             ART_CXX_FLAGS=
          else
             ART_CXX_FLAGS="-Wno-ignored-attributes -Wno-unused-command-line-argument"
          fi
          cmake \
            -GNinja \
            -DCMAKE_BUILD_TYPE=Release \
            -DENABLE_LIBRAW=1 \
            -DENABLE_OCIO=1 \
            -DENABLE_CTL=1 \
            -DCTL_INCLUDE_DIR=/usr/local/include/CTL \
            -DCMAKE_LIBRARY_PATH=/usr/local/lib \
            -DBUILD_BUNDLE=1 \
            -DCMAKE_CXX_FLAGS="${ART_CXX_FLAGS}" \
            ../repo
          cd ..

      - name: Build
        run: |
          cd build
          ninja install

      - name: Include Lensfun
        run: |
          lensfun-update-data

      - name: Create bundle
        env:
          GITHUB_AUTH: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd build/Release
          python ../../repo/tools/win/bundle_ART.py \
            -o ../../bundle -v -E -I -m c:/msys2/msys64 

      - name: Create installer
        working-directory: bundle
        shell: pwsh
        run: |
          choco install innosetup
          iscc /F"installer" "WindowsInnoSetup.iss"

      - name: Prepare artifact name
        run: |
          if [ "${{ matrix.arch }}" = "x64" ]; then
              ARTIFACT_NAME="ART_${ART_VERSION}_Win64.exe"
          else
              ARTIFACT_NAME="ART_${ART_VERSION}_Windows_arm64.exe"
          fi
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> "$(cygpath -u $GITHUB_ENV)"
          mv installer.exe ${ARTIFACT_NAME} 
          if [ "$GITHUB_REF_TYPE" = "tag" ]; then
              echo "RELEASE_TAG=${ART_VERSION}" >> "$(cygpath -u $GITHUB_ENV)"
              echo "RELEASE_MAKE_LATEST=true" >> "$(cygpath -u $GITHUB_ENV)"
          else
              echo "RELEASE_TAG=nightly" >> "$(cygpath -u $GITHUB_ENV)"
              echo "RELEASE_MAKE_LATEST=false" >> "$(cygpath -u $GITHUB_ENV)"
          fi

      - name: Create portable package
        run: |
          ART_DIR_NAME="${ARTIFACT_NAME%%.exe}_portable"
          mv bundle "${ART_DIR_NAME}"
          7z a "${ART_DIR_NAME}.7z" "${ART_DIR_NAME}"
          echo "ARTIFACT_ARCHIVE_NAME=${ART_DIR_NAME}.7z" >> "$(cygpath -u $GITHUB_ENV)"

      - name: Publish release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.RELEASE_TAG }}
          body: ${{ env.RELEASE_TAG }}
          allowUpdates: true
          makeLatest: ${{ env.RELEASE_MAKE_LATEST }}
          artifacts: ${{ env.ARTIFACT_NAME }},${{ env.ARTIFACT_ARCHIVE_NAME }}

