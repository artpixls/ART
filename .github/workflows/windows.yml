name: Windows Builds

on:
  push:
    tags:
      - '[1-9].[0-9]+'
      - '[1-9].[0-9]+.[0-9]+'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, windows-11-arm]
        include:
          - os: windows-latest
            arch: x64
            msystem: UCRT64
          - os: windows-11-arm
            arch: arm64
            msystem: CLANGARM64
      fail-fast: false
    
    runs-on: ${{ matrix.os }}

    permissions:
      contents: write
    
    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: Get version
        uses: actions/checkout@v4
        with:
          path: repo
        
      - name: Install base msys2
        uses: msys2/setup-msys2@v2
        with:
          location: C:\msys2
          update: true
          msystem: ${{ matrix.msystem }}
          install: |
            git
            wget
            xz
            p7zip

      - if: ${{ matrix.arch == 'x64' }}
        name: Install MSYS2 packages (x64)
        run: |
          wget https://github.com/agriggio/playground/releases/download/ucrt64/repo-ucrt64.tar
          tar xf repo-ucrt64.tar
          echo "[options]" > /etc/pacman.conf
          echo "HoldPkg     = pacman" >> /etc/pacman.conf
          echo "Architecture = auto" >> /etc/pacman.conf
          echo "SigLevel    = Required" >> /etc/pacman.conf
          echo "LocalFileSigLevel = Optional" >> /etc/pacman.conf
          echo "[msys]" >> /etc/pacman.conf
          echo "Include = /etc/pacman.d/mirrorlist.msys" >> /etc/pacman.conf
          echo "[custom-ucrt64]" >> /etc/pacman.conf
          echo "SigLevel = Optional TrustAll" >> /etc/pacman.conf
          echo "Server = file://${PWD}/repo-ucrt64" >> /etc/pacman.conf
          pacman -Sy
          for p in gcc cmake autotools ninja gtkmm3 lcms2 fftw lensfun mimalloc opencolorio; do
              pacman --noconfirm -S custom-ucrt64/mingw-w64-ucrt-x86_64-${p}
          done          

      - if: ${{ matrix.arch == 'arm64' }}
        name: Install MSYS2 packages (arm64)
        run: |
          wget https://github.com/agriggio/playground/releases/download/clangarm64/repo-clangarm64.tar
          tar xf repo-clangarm64.tar
          echo "[options]" > /etc/pacman.conf
          echo "HoldPkg     = pacman" >> /etc/pacman.conf
          echo "Architecture = auto" >> /etc/pacman.conf
          echo "SigLevel    = Required" >> /etc/pacman.conf
          echo "LocalFileSigLevel = Optional" >> /etc/pacman.conf
          echo "[msys]" >> /etc/pacman.conf
          echo "Include = /etc/pacman.d/mirrorlist.msys" >> /etc/pacman.conf
          echo "[custom-clangarm64]" >> /etc/pacman.conf
          echo "SigLevel = Optional TrustAll" >> /etc/pacman.conf
          echo "Server = file://${PWD}/repo-clangarm64" >> /etc/pacman.conf
          pacman -Sy
          for p in clang cmake autotools ninja gtkmm3 lcms2 fftw lensfun mimalloc opencolorio; do
              pacman --noconfirm -S custom-clangarm64/mingw-w64-clang-aarch64-${p}
          done
          
      - name: Get version
        run: |
          cd repo
          if [ "$GITHUB_REF_TYPE" = "tag" ]; then
              echo "ART_VERSION=$GITHUB_REF_NAME" >> "$(cygpath -u $GITHUB_ENV)"
          else
              echo "ART_VERSION=$(git rev-parse --short HEAD)" >> "$(cygpath -u $GITHUB_ENV)"
          fi
        
      - name: Install exiv2
        run: |
          wget https://github.com/Exiv2/exiv2/releases/download/v0.27.7/exiv2-0.27.7-Source.tar.gz
          tar xzf exiv2-0.27.7-Source.tar.gz
          mkdir build-exiv2
          cd build-exiv2
          cmake \
            -GNinja \
            -DCMAKE_BUILD_TYPE=Release  \
            -DCMAKE_INSTALL_PREFIX=c:/msys2/msys64/usr/local \
            -DEXIV2_ENABLE_WIN_UNICODE=1 \
            -DEXIV2_ENABLE_BMFF=1 \
            ../exiv2-0.27.7-Source
          ninja install
          cd ..

      - name: Install LibRaw
        run: |
          git clone --depth 1 https://github.com/LibRaw/LibRaw.git
          cd LibRaw
          autoreconf -i
          if [ "${{ matrix.msystem }}" = "UCRT64" ]; then
             export CC=gcc
             export CXX=g++
          else
             export CC=clang
             export CXX=clang++
          fi
          CPPFLAGS=-DUSE_X3FTOOLS ./configure --prefix=c:/msys2/msys64/usr/local
          make -j
          make install
          cd ..

      - name: Install CTL
        run: |
          git clone --depth 1 https://github.com/ampas/CTL.git
          mkdir build-CTL
          cd build-CTL
          cmake \
            -GNinja \
            -GNinja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=c:/msys2/msys64/usr/local \
            -DCMAKE_CXX_FLAGS="-fpermissive -fms-extensions" \
            -DCTL_BUILD_TESTS=0 -DCTL_BUILD_TOOLS=0 \
            ../CTL
          ninja install
          cd ..

      - name: Configure build
        run: |
          mkdir build
          cd build
          export PKG_CONFIG_PATH=c:/msys2/msys64/usr/local/lib/pkgconfig
          if [ "${{ matrix.msystem }}" = "UCRT64" ]; then
             ART_CXX_FLAGS=
          else
             ART_CXX_FLAGS="-Wno-ignored-attributes -Wno-unused-command-line-argument"
          fi
          cmake \
            -GNinja \
            -DCMAKE_BUILD_TYPE=Release \
            -DENABLE_LIBRAW=1 \
            -DENABLE_OCIO=1 \
            -DENABLE_CTL=1 \
            -DCTL_INCLUDE_DIR=/usr/local/include/CTL \
            -DCMAKE_LIBRARY_PATH=/usr/local/lib \
            -DBUILD_BUNDLE=1 \
            -DCMAKE_CXX_FLAGS="${ART_CXX_FLAGS}" \
            ../repo
          cd ..

      - name: Build
        run: |
          cd build
          ninja install

      - name: Include Lensfun
        run: |
          lensfun-update-data

      - name: Create bundle
        env:
          GITHUB_AUTH: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd build/Release
          python ../../repo/tools/win/bundle_ART.py \
            -o ../../bundle -v -E -I -m c:/msys2/msys64 

      - name: Create installer
        working-directory: bundle
        shell: pwsh
        run: |
          choco install innosetup
          iscc /F"installer" "WindowsInnoSetup.iss"

      - name: Prepare artifact name
        run: |
          if [ "${{ matrix.arch }}" = "x64" ]; then
              ARTIFACT_NAME="ART_${ART_VERSION}_Win64.exe"
          else
              ARTIFACT_NAME="ART_${ART_VERSION}_Windows_arm64.exe"
          fi
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> "$(cygpath -u $GITHUB_ENV)"
          mv installer.exe ${ARTIFACT_NAME} 
          if [ "$GITHUB_REF_TYPE" = "tag" ]; then
              echo "RELEASE_TAG=${ART_VERSION}" >> "$(cygpath -u $GITHUB_ENV)"
              echo "RELEASE_MAKE_LATEST=true" >> "$(cygpath -u $GITHUB_ENV)"
          else
              echo "RELEASE_TAG=nightly" >> "$(cygpath -u $GITHUB_ENV)"
              echo "RELEASE_MAKE_LATEST=false" >> "$(cygpath -u $GITHUB_ENV)"
          fi

      - name: Create portable package
        run: |
          ART_DIR_NAME="${ARTIFACT_NAME%%.exe}_portable"
          mv bundle "${ART_DIR_NAME}"
          7z a "${ART_DIR_NAME}.7z" "${ART_DIR_NAME}"
          echo "ARTIFACT_ARCHIVE_NAME=${ART_DIR_NAME}.7z" >> "$(cygpath -u $GITHUB_ENV)"

      - name: Publish release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.RELEASE_TAG }}
          body: ${{ env.RELEASE_TAG }}
          allowUpdates: true
          makeLatest: ${{ env.RELEASE_MAKE_LATEST }}
          artifacts: ${{ env.ARTIFACT_NAME }},${{ env.ARTIFACT_ARCHIVE_NAME }}

